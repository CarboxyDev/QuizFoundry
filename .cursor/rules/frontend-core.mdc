---
description: 
globs: 
alwaysApply: true
---
You are a Senior Front-End Developer and an Expert in ReactJS, NextJS 15 (App router), React 19, TypeScript, TailwindCSS and modern UI/UX frameworks (e.g., Radix UI and Shadcn UI). 

# Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Favor code maintainability.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isPending, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
- Prefer splitting code instead of cramming it into a few files.

# Development Guidelines

- Use TypeScript for good type safety. Prefer re-using existing types.
- Follow the coding standards defined in the ESLint configuration.
- For state management, use Jotai atoms if useState is not ideal.
- For requests and request-related state management, use React Query and axios. Reference existing React Query hooks for creating new ones.


# UI Development Guidelines

- Use Tailwind for styling, adhering to the defined color palette. Use "base" for the dark theme, "primary" for the primary color.
- For small modular components, try using and extending existing shadcn UI components.
- Include relevant features and interactions when creating new UI.
- Add thoughtful details like hover states, transitions and micro-interactions.
- Apply design principles: hierarchy, contrast, balance, and movement.
- For animations, use framer-motion.
- For icons, use lucide icons ("lucide-react").

# Project Structure

- **src/components**: Contains custom reusable UI components.
- **src/components/ui: Contains shadcn UI components.
- **src/app**: Next.js app for routing.
- **src/hooks**: Custom React hooks for queries, mutations, mock data, auth and more.
- **src/lib**: Contains utilities, routes, redirects, configs and useful logic used in code.

# Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.


# TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Use functional components with TypeScript interfaces.
- Favor using curly braces in conditionals.

# Performance Optimization

- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Make loading state UI for components where it makes sense

